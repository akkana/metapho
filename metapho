#!/usr/bin/env python

# metapho: an image tagger and viewer.

# Copyright 2013 by Akkana Peck: share and enjoy under the GPL v2 or later.

import MetaPho
import MetaPho.gtkpho

import gtk

import sys, os

class MetaPhoWindow(object):
    '''The main controller window for MetaPho.
       This holds any child widgets, like the image viewer and tags window,
       and manages key events and other user commands.
    '''

    def __init__(self, file_list):
        for filename in file_list :
            MetaPho.Image.gImageList.append(MetaPho.Image(filename))
        self.imgno = 0

        # Window size.
        # Eventually, calculate these somehow or read from prefs
        #self.width = 1024
        #self.height = 768

        # The size of the image viewing area:
        self.imgwidth = 640
        self.imgheight = 600

        self.win = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.win.set_border_width(10)

        self.win.connect("delete_event", self.quit)
        self.win.connect("destroy", self.quit)

        # Showing the first image is a problem. We need to call
        # firstImage() at some point, but we can't load any images
        # until after the viewer has been exposed at least once.
        # So even though blah blah XXX
        # self.win.connect_after("expose", self.realize_handler)

        main_hbox = gtk.HBox(spacing=8)

        self.viewer = MetaPho.gtkpho.ImageViewer()
        self.viewer.set_size_request(self.imgwidth, self.imgheight)
        main_hbox.pack_start(self.viewer)

        self.tagger = MetaPho.gtkpho.TagViewer()
        main_hbox.pack_start(self.tagger, expand=True)

        #self.win.set_default_size(self.width, self.height)

        self.win.add(main_hbox)

        self.win.connect("key-press-event", self.key_press_event)
        self.win.show_all();

        self.readAllTags()

    def realize_handler(self, widget, event) :
        self.firstImage()

    def quit(self, widget=None, data=None):
        # If focus is currently in a text entry, there may be changed
        # text that hasn't been updated yet in the tags list.
        # Call the tagger to warn about that.
        if type(self.win.get_focus()) is gtk.Entry :
            tagger.check_entry_tag(self.win.get_focus())

        print "==========="
        print self.tagger
        self.tagger.writeTagFile()
        gtk.main_quit()

    def readAllTags(self) :
        '''Read tags in all directories used by images in argv.
        '''
        dirlist = []
        for img in MetaPho.Image.gImageList :
            dirname = os.path.dirname(img.filename)
            if dirname not in dirlist :
                dirlist.append(dirname)
                self.tagger.readTags(dirname)
        self.tagger.displayTags()

    def firstImage(self) :
        self.imgno = -1
        self.nextImage()

    def lastImage(self) :
        self.imgno = len(MetaPho.Image.gImageList)
        self.prevImage()

    def nextImage(self) :
        '''Advance to the next image, if possible.
           Tell the viewer to load and show the image.
        '''
        loaded = False
        while self.imgno < len(MetaPho.Image.gImageList)-1 and not loaded :
            self.imgno += 1
            loaded = self.viewer.loadImage(MetaPho.Image.gImageList[self.imgno])
            if not loaded :
                del(MetaPho.Image.gImageList[self.imgno])
                # The loop is about to increment imgno, but we actually want
                # it to stay the same since deleting the nonexistent image
                # slid the next image into the current position;
                # so decrement imgno now.
                self.imgno -= 1

        if loaded :
            self.tagger.setImage(MetaPho.Image.gImageList[self.imgno])

        else :           # couldn't load anything in the list
            print "No more images"

    def prevImage(self) :
        loaded = False
        while self.imgno >= 1 and not loaded :
            self.imgno -= 1
            loaded = self.viewer.loadImage(MetaPho.Image.gImageList[self.imgno])
            if not loaded :
                del(MetaPho.Image.gImageList[self.imgno])

        if loaded :
            self.tagger.setImage(MetaPho.Image.gImageList[self.imgno])
        else :          # couldn't load anything in the list
            print "Can't go before first image"

    def deleteConfirm(self) :
        '''Ask the user whether to really delete an image.
           Return True for yes, False for no.
           Accept some keystrokes beyond the usual ones,
           e.g. d or ctrl-d confirms the delete.
        '''
        dialog = gtk.MessageDialog(self.win, 
                                   gtk.DIALOG_DESTROY_WITH_PARENT,
                                   gtk.MESSAGE_QUESTION, 
                                   #gtk.BUTTONS_YES_NO,
                                   gtk.BUTTONS_CANCEL,
                                   "Delete %s ?" % \
                                     MetaPho.Image.gImageList[self.imgno])
        delete_btn = dialog.add_button("Delete", gtk.RESPONSE_YES)

        # Handle key events on the dialog,
        # to make it easier for the user to respond.
        def delete_dialog_key_press(widget, event, dialog) :
            if event.string == 'q' :
                dialog.emit("response", gtk.RESPONSE_NO)
                return True
            elif event.keyval == gtk.keysyms.d :  # d with or without ctrl
                dialog.emit("response", gtk.RESPONSE_YES)
                return True
            return False
        dialog.connect("key-press-event", delete_dialog_key_press, dialog)

        response = dialog.run()
        dialog.destroy()
        if response == gtk.RESPONSE_YES :
            return True
        return False

    # Called whenever any key is pressed:
    def key_press_event(self, widget, event) :
        entry_focused = (type(self.win.get_focus()) is gtk.Entry)

        # ESC, Return or ctrl-space shifts focus to the next tag entry,
        # or out of the entries if we're already typing in one.
        if event.keyval == gtk.keysyms.Escape or \
                event.keyval == gtk.keysyms.Return or \
                (event.keyval == gtk.keysyms.space and \
                 event.state & gtk.gdk.CONTROL_MASK) :
            if entry_focused :
                self.win.set_focus(None)
            else :
                self.tagger.focus_next_entry(self.win)
            return True 

        if event.keyval == gtk.keysyms.Return and entry_focused :
            # Return when in an entry goes to the next entry
            self.tagger.focus_next_entry(self.win)
            return True

        # For any other keys, if focus is in a text entry, just let
        # the user type, and don't try to navigate.
        if entry_focused :
            #print "Focus is in an entry"
            return False

        # Ctrl-d means delete the current image (after confirmation)
        if event.keyval == gtk.keysyms.d and \
                event.state & gtk.gdk.CONTROL_MASK :
            if self.deleteConfirm() :
                MetaPho.Image.gImageList[self.imgno].delete()
                self.imgno -= 1
                self.nextImage()
            return True

        if event.string == "q" :
            self.quit()
            return True
        if event.string == " " :
            self.nextImage()
            return True 
        if event.keyval == gtk.keysyms.BackSpace :
            self.prevImage()
            return True
        if event.keyval == gtk.keysyms.Home :
            self.firstImage()
            return True
        if event.keyval == gtk.keysyms.End :
            self.lastImage()
            return True
        if event.keyval == gtk.keysyms.Right :
            self.viewer.rotate(270)
            return True
        if event.keyval == gtk.keysyms.Left :
            self.viewer.rotate(90)
            return True
        if event.keyval in [ gtk.keysyms.Up, gtk.keysyms.Down ] :
            self.viewer.rotate(180)
            return True
        if event.string in ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9') :
            self.tagger.toggleTag(int(event.string),
                                  MetaPho.Image.gImageList[self.imgno])
            return True

        # A key we didn't understand
        #print "Read key:", event.string, "keyval", event.keyval
        return False

    def main(self):
        gtk.main()

if __name__ == '__main__':
    metapho = MetaPhoWindow(sys.argv[1:])
    metapho.firstImage()
    metapho.main()
